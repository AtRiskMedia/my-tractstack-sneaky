---
import { ulid } from 'ulid';
import Layout from '@/layouts/Layout.astro';
import Header from '@/components/Header.astro';
import { getFullContentMap } from '@/stores/analytics';
import { getBrandConfig } from '@/utils/api/brandConfig';
import { joinUrlPaths } from '@/utils/helpers';
import { handleFailedResponse } from '@/utils/backend';
import { components as codeHookComponents } from '@/custom/CodeHook.astro';
import StoryKeepHeader from '@/components/edit/Header';
import StoryKeepToolBar from '@/components/edit/ToolBar';
import StoryKeepToolMode from '@/components/edit/ToolMode';
import SettingsPanel from '@/components/edit/SettingsPanel';
import { Compositor } from '@/components/compositor/Compositor';
import { requireAdminOrEditor } from '@/utils/auth';
import { preHealthCheck } from '@/utils/backend';

const tenantId =
  Astro.locals.tenant?.id || import.meta.env.PUBLIC_TENANTID || 'default';

const healthCheckRedirect = await preHealthCheck(tenantId);
if (healthCheckRedirect !== undefined) {
  return healthCheckRedirect;
}

const { contextSlug } = Astro.params;
if (!contextSlug) return Astro.redirect('/404');

// Authentication check - redirect to login if not authenticated
const authCheck = requireAdminOrEditor(Astro);
if (authCheck) {
  return authCheck;
}

const goBackend = import.meta.env.PUBLIC_GO_BACKEND || 'http://localhost:8080';

const brandConfig = await getBrandConfig(tenantId);
if (!brandConfig.SITE_INIT) {
  return Astro.redirect('/storykeep');
}

let loadData;
let contextPane;
let title;
let contextPaneID;

// Handle create mode
if (contextSlug === 'create') {
  // Create empty context pane in memory
  const emptyContextPane = {
    id: ulid(),
    nodeType: 'Pane' as const,
    parentId: null,
    title: '',
    slug: '',
    isContextPane: true,
    created: new Date(),
    changed: new Date(),
    isDecorative: false,
  };

  loadData = {
    paneNodes: [emptyContextPane],
  };

  contextPane = emptyContextPane;
  title = 'Create New Context Page - TractStack Editor';
  contextPaneID = emptyContextPane.id;
} else {
  // Existing backend fetch logic - use full-payload endpoint
  const endpoint = `${goBackend}/api/v1/nodes/panes/slug/${contextSlug}/full-payload`;

  try {
    const response = await fetch(endpoint, {
      headers: {
        'X-Tenant-ID': tenantId,
        Cookie: Astro.request.headers.get('cookie') || '',
      },
    });

    const failedResponse = await handleFailedResponse(
      response,
      goBackend,
      tenantId,
      Astro.url.pathname
    );
    if (failedResponse) {
      return failedResponse;
    }

    loadData = await response.json();
  } catch (error) {
    console.error('Error fetching context pane full payload:', error);
    return Astro.redirect(
      `/maint?from=${encodeURIComponent(Astro.url.pathname)}`
    );
  }

  // Extract data from the response (same pattern as storyfragment)
  contextPane = loadData?.paneNodes?.at(0);
  title = contextPane?.title || `Context Editor`;
  contextPaneID = contextPane?.id;
}

const canonicalURL = `/context/${contextSlug}`;

// Extract dates if available
const pubDatetime = contextPane?.created
  ? new Date(contextPane.created)
  : undefined;
const modDatetime = contextPane?.changed ? new Date(contextPane.changed) : null;

// Social image from the context pane
const ogImage = contextPane?.socialImagePath
  ? joinUrlPaths(brandConfig?.SITE_URL || ``, contextPane.socialImagePath)
  : undefined;

const fullContentMap = await getFullContentMap(tenantId);
const urlParams: Record<string, string | boolean> = {};
for (const [key, value] of Astro.url.searchParams) {
  urlParams[key] = value === '' ? true : value;
}
---

<Layout
  title={title}
  slug={contextSlug}
  canonicalURL={canonicalURL}
  pubDatetime={pubDatetime}
  modDatetime={modDatetime}
  ogImage={ogImage}
  brandConfig={brandConfig}
  storyfragmentId={contextPaneID}
  isStoryKeep={true}
  isEditor={true}
>
  <!-- Standard Header (scrollable) -->
  <Header
    title={title}
    slug={contextSlug}
    brandConfig={brandConfig}
    isContext={true}
    isStoryKeep={true}
    isEditable={false}
    menu={null}
  />

  <!-- StoryKeep Editor Header (scroll-aware positioning) -->
  <section
    id="storykeepHeader"
    role="banner"
    class="z-101 bg-mywhite left-0 right-0 drop-shadow transition-all duration-200"
  >
    <StoryKeepHeader slug={contextSlug} isContext={true} client:only="react" />
  </section>

  <div class="flex min-h-screen">
    <!-- Tool Navigation (mobile bottom, desktop side) -->
    <StoryKeepToolMode isContext={true} client:only="react" />

    <!-- Main Content Area -->
    <main
      id="mainContent"
      class="relative flex-1"
      style={{
        paddingBottom: 'var(--bottom-right-controls-bottom-offset, 16px)',
      }}
    >
      <div class="bg-myblue/20 bg-mylightgrey h-full p-1.5">
        <div
          class="h-fit min-h-screen"
          style={{
            backgroundImage:
              'repeating-linear-gradient(135deg, transparent, transparent 10px, rgba(0,0,0,0.05) 10px, rgba(0,0,0,0.05) 20px)',
          }}
        >
          <Compositor
            id={contextPaneID}
            nodes={loadData}
            config={brandConfig}
            fullContentMap={fullContentMap}
            fullCanonicalURL={canonicalURL}
            urlParams={urlParams}
            availableCodeHooks={Object.keys(codeHookComponents)}
            client:only="react"
          />
        </div>
      </div>
    </main>
  </div>

  <!-- Floating Controls (Settings Panel & HUD OR ToolBar) -->
  <aside
    id="settingsControls"
    class="z-101 pointer-events-none fixed bottom-24 right-0 flex max-h-screen flex-col items-end gap-2 overflow-y-auto p-4 md:bottom-0"
  >
    <div class="pointer-events-auto">
      <StoryKeepToolBar client:only="react" />
    </div>
    <div class="pointer-events-auto">
      <SettingsPanel
        config={brandConfig}
        availableCodeHooks={Object.keys(codeHookComponents)}
        client:only="react"
      />
    </div>
  </aside>
</Layout>

<script>
  import { setupLayoutObservers, setupLayoutStyles } from '@/utils/layout';
  setupLayoutStyles();
  setupLayoutObservers();
</script>
