---
import CustomRoutes, { routes } from '@/custom/CustomRoutes.astro';
import { preHealthCheck } from '@/utils/backend';
import type { ResourceNode } from '@/types/compositorTypes';

const tenantId =
  Astro.locals.tenant?.id || import.meta.env.PUBLIC_TENANTID || 'default';

const healthCheckRedirect = await preHealthCheck(tenantId);
if (healthCheckRedirect !== undefined) {
  return healthCheckRedirect;
}

const { param1 } = Astro.params;
const route = `collections`;

// Check if route is enabled
if (!param1 || !routes[route]) {
  return new Response(null, {
    status: 404,
    statusText: 'Not Found',
  });
}

const CATEGORIES = [`collections`];

let resources = [];
const goBackend = import.meta.env.PUBLIC_GO_BACKEND || 'http://localhost:8080';

try {
  const resourcesResponse = await fetch(`${goBackend}/api/v1/nodes/resources`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ categories: CATEGORIES }),
  });

  if (resourcesResponse.ok) {
    const { resources: fetchedResources } = await resourcesResponse.json();
    resources = fetchedResources || [];
  }
} catch (error) {
  console.error('Error fetching resources:', error);
  return new Response(null, {
    status: 500,
    statusText: 'Internal Server Error',
  });
}

// Check if the specific resource exists
const targetSlug = `${route}-${param1}`;
console.log(`check category vs categorySlug`, resources);
const resourceExists = resources.some(
  (resource: ResourceNode) =>
    resource.category === route && resource.slug === targetSlug
);

if (!resourceExists) {
  return new Response(null, {
    status: 404,
    statusText: 'Not Found',
  });
}
---

<CustomRoutes route={route} slug={param1} resources={resources} />
