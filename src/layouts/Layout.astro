---
import { ClientRouter } from 'astro:transitions';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import { getBrandConfig } from '@/utils/api/brandConfig';
import { freshInstallStore } from '@/stores/backend';
import type { MenuNode } from '@/types/tractstack';
import type { ImpressionNode } from '@/types/compositorTypes';
export interface Props {
  title: string;
  slug?: string;
  menu?: MenuNode | null;
  created?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  ogImage?: string;
  isContext?: boolean;
  isStoryKeep?: boolean;
  isEditor?: boolean;
  isEditable?: boolean;
  brandConfig?: any;
  storyfragmentId?: string;
  sessionId?: string;
  impressions?: ImpressionNode[];
}

const {
  title,
  description = '',
  slug = '',
  menu = null,
  created,
  canonicalURL = Astro.url.pathname,
  pubDatetime,
  modDatetime,
  ogImage,
  isContext = false,
  isStoryKeep = false,
  isEditor = false,
  isEditable = false,
  brandConfig: propBrandConfig,
  storyfragmentId = '',
  sessionId = '',
  impressions = [],
} = Astro.props;

const isInitialized = !freshInstallStore.get().needsSetup;
const goBackend = import.meta.env.PUBLIC_GO_BACKEND || 'http://localhost:8080';
const tenantId =
  Astro.locals.tenant?.id || import.meta.env.PUBLIC_TENANTID || 'default';
const brandConfig = propBrandConfig || (await getBrandConfig(tenantId));
const cssBasePath = isInitialized ? '/media/css' : '/styles';
const fontBasePath = isInitialized ? '/media/fonts' : '/fonts';
const mainStylesUrl = (() => {
  const baseUrl = isStoryKeep
    ? `${cssBasePath}/storykeep.css`
    : `${cssBasePath}/frontend.css`;
  if (!isStoryKeep && brandConfig?.STYLES_VER) {
    return `${baseUrl}?v=${brandConfig.STYLES_VER}`;
  }
  return baseUrl;
})();

const defaultFavIcon = brandConfig.FAVICON || `/brand/favicon.ico`;
const defaultSocialImageURL = ogImage || brandConfig.OG || `/brand/og.png`;
const defaultSocialLogoURL = brandConfig.OGLOGO || `/brand/oglogo.png`;
const defaultSocialTitle =
  title || brandConfig.OGTITLE || `TractStack dynamic website`;
const defaultSocialAuthor = brandConfig.OGAUTHOR || `TractStack`;
const defaultSocialDesc =
  description ||
  brandConfig.OGDESC ||
  `No-code website builder and content marketing platform`;
const socialImageFullURL = brandConfig?.SITE_URL
  ? `${brandConfig.SITE_URL.replace(/\/$/, '')}${defaultSocialImageURL}`
  : `${defaultSocialImageURL}`;
const socialLogoFullURL = brandConfig?.SITE_URL
  ? `${brandConfig.SITE_URL.replace(/\/$/, '')}${defaultSocialLogoURL}`
  : `${defaultSocialLogoURL}`;
const gtagId = brandConfig?.GTAG || false;
const gtagUrl =
  gtagId && typeof gtagId === `string` && gtagId.length > 1
    ? `https://www.googletagmanager.com/gtag/js?id=${gtagId}`
    : null;
const fullCanonicalUrl = brandConfig?.SITE_URL
  ? canonicalURL.startsWith('/')
    ? `${brandConfig.SITE_URL.replace(/\/$/, '')}${canonicalURL}`
    : `${brandConfig.SITE_URL.replace(/\/$/, '')}/${canonicalURL}`
  : canonicalURL;

const enableBunny = import.meta.env.PUBLIC_ENABLE_BUNNY === 'true';
---

<!doctype html>
<html lang="en" class="motion-safe:scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, viewport-fit=cover"
    />
    <meta name="description" content={defaultSocialDesc} />
    <meta name="author" content={defaultSocialAuthor} />
    <meta name="generator" content={Astro.generator} />
    <link rel="icon" type="image/svg+xml" href={defaultFavIcon} />
    <link rel="canonical" href={fullCanonicalUrl} />
    <title>{defaultSocialTitle}</title>
    <link rel="stylesheet" href={`${cssBasePath}/custom.css`} />
    <link rel="stylesheet" href={mainStylesUrl} />
    <link rel="sitemap" href="/sitemap.xml" />

    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css"
    />

    <meta name="storyfragment-id" content={storyfragmentId} />
    <meta name="session-id" content={sessionId} />

    <meta name="title" content={defaultSocialTitle} />
    <meta
      property="og:site_name"
      content={brandConfig?.OGAUTHOR || brandConfig?.OGTITLE || 'TractStack'}
    />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta
      property="og:image:alt"
      content={`${defaultSocialTitle} - Social Preview Image`}
    />
    <meta property="og:locale" content="en_US" />

    <meta property="og:title" content={defaultSocialTitle} />
    <meta property="og:type" content="website" />
    <meta property="og:description" content={defaultSocialDesc} />
    <meta property="og:url" content={fullCanonicalUrl} />
    <meta property="og:image" content={socialImageFullURL} />
    <meta property="og:logo" content={socialLogoFullURL} />

    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={fullCanonicalUrl} />
    <meta property="twitter:title" content={defaultSocialTitle} />
    <meta property="twitter:description" content={defaultSocialDesc} />
    <meta property="twitter:image" content={socialImageFullURL} />

    {
      pubDatetime && (
        <meta
          property="article:published_time"
          content={pubDatetime.toISOString()}
        />
      )
    }
    {
      modDatetime && (
        <meta
          property="article:modified_time"
          content={modDatetime.toISOString()}
        />
      )
    }

    {gtagUrl && <script async src={gtagUrl} is:inline />}
    <script is:inline define:vars={{ gtagId: brandConfig?.GTAG || '' }}>
      (function () {
        if (gtagId && gtagId.length > 1) {
          window.dataLayer = window.dataLayer || [];
          window.gtag =
            window.gtag ||
            function () {
              window.dataLayer.push(arguments);
            };

          window.gtag('js', new Date());
          window.gtag('config', gtagId);

          document.addEventListener('astro:after-swap', () => {
            window.gtag('config', gtagId);
          });
        }
      })();
    </script>

    <ClientRouter />

    {
      enableBunny && (
        <script
          is:inline
          type="text/javascript"
          src="//assets.mediadelivery.net/playerjs/player-0.1.0.min.js"
        />
      )
    }

    <script src="/client/htmx.min.js" is:inline></script>

    <script
      define:vars={{
        goBackend,
        tenantId,
        fontBasePath,
        storyfragmentId,
        sessionId,
      }}
      is:inline
    >
      // Capture the initial, server-rendered values from define:vars into top-level constants.
      // This makes the scope explicit and resolves the linter error.
      const initialStoryfragmentId = storyfragmentId;
      const initialSessionId = sessionId;

      function updateTractstackConfig() {
        const storyfragmentMeta = document.querySelector(
          'meta[name="storyfragment-id"]'
        );
        const sessionMeta = document.querySelector('meta[name="session-id"]');

        window.TRACTSTACK_CONFIG = {
          configured: true,
          backendUrl: goBackend,
          tenantId: tenantId,
          fontBasePath: fontBasePath,
          // Use the meta tag if it exists (for subsequent client-side loads),
          // otherwise fall back to the initial server-rendered value.
          storyfragmentId: storyfragmentMeta
            ? storyfragmentMeta.content
            : initialStoryfragmentId,
          sessionId: sessionMeta ? sessionMeta.content : initialSessionId,
        };
      }

      updateTractstackConfig();
      document.addEventListener('astro:page-load', updateTractstackConfig);
    </script>
  </head>
  <body class="font-main w-full">
    <div class="overflow-hidden">
      {
        !isEditor && (
          <Header
            title={title}
            slug={slug}
            brandConfig={brandConfig}
            isContext={isContext}
            isStoryKeep={isStoryKeep}
            isEditable={isEditable}
            sessionId={sessionId}
            menu={menu}
            storyfragmentId={storyfragmentId}
            impressions={impressions}
          />
        )
      }
      <div
        id="loading-backdrop"
        class="pointer-events-none fixed inset-0"
        style="opacity: 0; z-index: 10069; display: none; background-color: rgba(255, 255, 255, 0.3); backdrop-filter: blur(4px); transition: opacity 300ms;"
      >
      </div>
      <div
        id="loading-indicator"
        class="bg-myorange fixed left-0 top-0 h-1 w-full scale-x-0 transform transition-transform duration-300 ease-out"
        style="opacity: 0.5; filter: blur(0.5px); z-index: 99999;"
      >
      </div>

      <div id="content" class="transition-opacity duration-300">
        <slot />
      </div>
      {
        !isEditor && (
          <Footer
            slug={slug}
            brandConfig={brandConfig}
            isContext={isContext}
            menu={menu}
            created={created}
            backToTop={true}
          />
        )
      }
    </div>

    <script type="module" src="/client/app.js" is:inline is:persist></script>

    <script type="module" src="/client/view.js" is:inline></script>

    <script is:inline is:persist>
      let navProgressInterval = null;
      let navSafetyTimeout = null;

      function startNavLoadingAnimation() {
        const loadingIndicator = document.getElementById('loading-indicator');
        const loadingBackdrop = document.getElementById('loading-backdrop');
        const content = document.getElementById('content');

        if (
          window.matchMedia('(prefers-reduced-motion: no-preference)')
            .matches &&
          loadingIndicator &&
          loadingBackdrop
        ) {
          if (navSafetyTimeout !== null) {
            clearTimeout(navSafetyTimeout);
            navSafetyTimeout = null;
          }

          loadingBackdrop.style.display = 'block';
          void loadingBackdrop.offsetHeight;
          loadingBackdrop.style.opacity = '1';

          if (content) {
            content.style.opacity = '0.7';
          }

          loadingIndicator.style.transform = 'scaleX(0)';
          loadingIndicator.style.display = 'block';

          let progress = 0;
          navProgressInterval = setInterval(() => {
            progress += 2;
            if (progress > 90) {
              if (navProgressInterval !== null) {
                clearInterval(navProgressInterval);
              }
              return;
            }
            loadingIndicator.style.transform = `scaleX(${progress / 100})`;
          }, 20);

          navSafetyTimeout = setTimeout(() => {
            stopNavLoadingAnimation();
          }, 10000);
        }
      }

      function stopNavLoadingAnimation() {
        const loadingIndicator = document.getElementById('loading-indicator');
        const loadingBackdrop = document.getElementById('loading-backdrop');
        const content = document.getElementById('content');

        if (navSafetyTimeout !== null) {
          clearTimeout(navSafetyTimeout);
          navSafetyTimeout = null;
        }

        if (
          window.matchMedia('(prefers-reduced-motion: no-preference)')
            .matches &&
          loadingIndicator &&
          loadingBackdrop
        ) {
          if (navProgressInterval !== null) {
            clearInterval(navProgressInterval);
            navProgressInterval = null;
          }

          loadingIndicator.style.transform = 'scaleX(1)';

          if (content) {
            content.style.opacity = '1';
          }

          loadingBackdrop.style.opacity = '0';

          setTimeout(() => {
            loadingIndicator.style.display = 'none';
            loadingIndicator.style.transform = 'scaleX(0)';
            loadingBackdrop.style.display = 'none';
          }, 300);
        }
      }

      function setupNavigationLoading() {
        document.addEventListener('astro:before-preparation', () => {
          startNavLoadingAnimation();
        });

        document.addEventListener('astro:page-load', () => {
          stopNavLoadingAnimation();
        });

        document.addEventListener('astro:after-swap', () => {
          stopNavLoadingAnimation();
        });
      }

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', setupNavigationLoading);
      } else {
        setupNavigationLoading();
      }

      document.addEventListener('astro:page-load', setupNavigationLoading);
    </script>
  </body>
</html>
